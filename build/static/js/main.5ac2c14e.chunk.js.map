{"version":3,"sources":["services/web3Utils.tsx","constants/tokens.tsx","constants/tokenSet.tsx","services/tokenSet.tsx","contexts/TokensContext.tsx","services/coingeckoApi.ts","contexts/SwapContext.tsx","Providers.tsx","services/connectors.ts","components/WalletButton.tsx","hooks/web3Hooks.ts","components/NavBar.tsx","hooks/useTokens.ts","components/UserProfile/UserBalance.tsx","components/UserProfile/UserTokens.tsx","components/UserProfile/UserProfile.tsx","components/Hero.tsx","components/Tokens.tsx","components/Footer.tsx","hooks/useSwap.ts","components/Swap/components/SwapControls.tsx","components/Swap/Swap.tsx","App.tsx","index.tsx"],"names":["getLibrary","provider","library","Web3Provider","pollingInterval","getErrorMessage","error","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","console","getNetworkName","id","getNetworkToken","formatAccount","account","substring","length","Balance","useWeb3React","chainId","React","useState","balance","setBalance","useEffect","stale","getBalance","then","catch","formatEther","indexOf","tokensInfo","name","symbol","image","fee","contractPolygon","decimals","price","amount","exchangeIssuanceV2","USDC","activeTokensFrom","contract","getContract","ABI","address","Contract","undefined","getTokenBalance","contractAddress","a","erc20ABI","balanceOf","getTokenPrice","exchangeIssuanceV2ABI","getAmountOutOnRedeemSet","getEstimatedIssueSetAmount","contractAddressTo","contractAddressFrom","amountFrom","amountTo","TokensContext","createContext","TokensProvider","children","tokens","setTokens","index","map","token","i","BigNumber","from","toString","Number","Provider","value","baseURL","coingeckoGetTokenPrice","baseCurrency","getPriceUrl","fetch","resp","json","err","data","toLowerCase","SwapContext","activeTokenFrom","setActiveTokenFrom","activeTokenTo","setActiveTokenTo","setAmountFrom","setAmountTo","SwapProvider","parseUnits","formatUnits","toFixed","updateSwapInfo","Providers","RPC_URLS","1","process","RPC_URL_1","4","RPC_URL_4","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","qrcode","walletlink","WalletLinkConnector","url","appName","WalletButton","showModal","setShowModal","handleClose","context","connector","activate","deactivate","activatingConnector","setActivatingConnector","suppress","active","ethereum","window","on","handleConnect","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","useEagerConnect","walletButtonText","Dropdown","align","Toggle","className","variant","Image","style","width","src","max-width","roundedCircle","Menu","Card","Header","Button","onClick","Body","Title","Text","Footer","Modal","show","onHide","closeButton","NavBar","networkStatus","GetSelectedNetworkStatus","Container","fluid","Navbar","collapseOnSelect","expand","Brand","href","alt","aria-controls","Collapse","Nav","useTokens","useContext","UserBalance","UserTokens","Table","handleWithdraw","UserProfile","Hero","Tokens","handleInvest","useSwap","SelectTokensFrom","Form","Select","onChange","e","parseInt","currentTarget","SelectTokensTo","Swap","swapActionState","setSwapActionState","activeKey","onSelect","selectedKey","Item","Link","eventKey","Row","Col","Group","Label","size","Control","type","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ac2c14e.chunk.js","sourcesContent":["import React from 'react'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { formatEther  } from '@ethersproject/units'\n\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function getNetworkName(id: number) {\n  switch (id) {\n    case 1: {\n      return 'Ethereum'\n    }\n    case 137: {\n      return 'Polygon'\n    }\n    default: {\n      return 'Not Connected'\n    }\n  }\n}\n\nexport function getNetworkToken(id: number) {\n  switch (id) {\n    case 1: {\n      return 'ETH'\n    }\n    case 137: {\n      return 'MATIC'\n    }\n    default: {\n      return 'Not Connected'\n    }\n  }\n}\n\nexport function GetSelectedNetworkStatus() {\n  const { chainId, error } = useWeb3React()\n  return (\n    <>\n      {chainId\n        ? getNetworkName(chainId)\n        : error\n        ? getErrorMessage(error)\n        : 'Not Connected'}\n    </>\n  )\n}\n\nexport function ChainId() {\n  const { chainId } = useWeb3React()\n\n  return (\n    <>\n      <span>Chain Id</span>\n      <span role=\"img\" aria-label=\"chain\">\n        ⛓\n      </span>\n      <span>{chainId ?? ''}</span>\n    </>\n  )\n}\n\n\nexport function BlockNumber() {\n  const { chainId, library } = useWeb3React()\n\n  const [blockNumber, setBlockNumber] = React.useState<number>()\n  React.useEffect((): any => {\n    if (!!library) {\n      let stale = false\n\n      library\n        .getBlockNumber()\n        .then((blockNumber: number) => {\n          if (!stale) {\n            setBlockNumber(blockNumber)\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBlockNumber(0)\n          }\n        })\n\n      const updateBlockNumber = (blockNumber: number) => {\n        setBlockNumber(blockNumber)\n      }\n      library.on('block', updateBlockNumber)\n\n      return () => {\n        stale = true\n        library.removeListener('block', updateBlockNumber)\n        setBlockNumber(undefined)\n      }\n    }\n  }, [library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Block Number</span>\n      <span role=\"img\" aria-label=\"numbers\">\n        🔢\n      </span>\n      <span>{blockNumber === null ? 'Error' : blockNumber ?? ''}</span>\n    </>\n  )\n}\n\nexport function formatAccount(account: any) {\n  return account === null\n    ? '-'\n    : account\n    ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}`\n    : ''\n}\n\nexport function Account() {\n  const { account } = useWeb3React()\n\n  return (\n    <>\n      <span>Account</span>\n      <span role=\"img\" aria-label=\"robot\">\n        🤖\n      </span>\n      <span>{formatAccount(account)}</span>\n    </>\n  )\n}\n\nexport function Balance() {\n  const { account, library, chainId } = useWeb3React()\n  const [balance, setBalance] = React.useState<string>()\n\n  React.useEffect((): any => {\n    if (!!account && !!library) {\n      let stale = false\n\n      library\n        .getBalance(account)\n        .then((balance: any) => {\n          if (!stale) {\n            setBalance(balance)\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBalance('')\n          }\n        })\n\n      return () => {\n        stale = true\n        setBalance('')\n      }\n    }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      {balance === null ? 'Error' : balance ? `${formatEther(balance).substring(0, formatEther(balance).indexOf('.') + 5)  + ' ' + getNetworkToken(chainId || 0)} ` : ''}\n    </>\n  )\n}\n","\nexport const tokensInfo = [\n    {\n      id: 0,\n      name: 'Common Sense Top10 Index',\n      symbol: 'CSTOP',\n      image: 'https://commonsense.finance/cs-static/cstop.png',\n      fee: '2%',\n      contractPolygon: '0xff3ee79CB4A7Fe0F78a3634cCfDbFc3CdCD65a64',\n      decimals: '18',\n      price: 0,\n      amount: '0',\n      balance: 0,\n    },\n    {\n      id: 1,\n      name: 'Tmatic & Teth ',\n      symbol: 'TST',\n      image: '',\n      fee: '0%',\n      contractPolygon: '0x04A250E193571A5621998F61bb258701c8a6034d',\n      decimals: '18',\n      price: 0,\n      amount: '0',\n      balance: 0,\n    },\n  ]\n","\nexport const exchangeIssuanceV2 = {\n  contractPolygon: '0x85D284abc931e4ADe71EEe52341A0C83845F811C',\n}\n\nexport const USDC = {\n  contractPolygon: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',\n}\n\nexport const activeTokensFrom = [\n  {\n    id: 0,\n    symbol: 'WETH',\n    name: 'Wrapped Ether',\n    contractPolygon: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n    contract: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    decimals: '18',\n    balance: '0',\n    price: '0'\n  }, \n  {\n    id: 1,\n    symbol: 'WBTC',\n    name: 'Wrapped BTC',\n    contractPolygon: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6',\n    contract: '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',\n    decimals: '8',\n    balance: '0',\n    price: '0'\n  },\n  {\n    id: 2,\n    symbol: 'DAI',\n    name: 'Dai Stablecoin',\n    contractPolygon: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',\n    contract: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    decimals: '18',\n    balance: '0',\n    price: '0'\n  },\n  {\n    id: 3,\n    symbol: 'WMATIC',\n    name: 'Wrapped Matic',\n    contractPolygon: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    contract: '0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0',\n    decimals: '18',\n    balance: '0',\n    price: '0'\n  },\n  {\n    id: 4,\n    symbol: 'USDT',\n    name: 'Tether USD',\n    contractPolygon: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n    contract: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    decimals: '6',\n    balance: '0',\n    price: '0'\n  },\n  {\n    id: 5,\n    symbol: 'USDC',\n    name: 'USD Coin',\n    contractPolygon: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    contract: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    decimals: '6',\n    balance: '0',\n    price: '0'\n  },\n]\n  \n\n","import { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\n\nimport { exchangeIssuanceV2, USDC } from '../constants/tokenSet'\n\n\nimport erc20ABI from '../services/ABI/erc20.json'\nimport tokenSetABI from '../services/ABI/tokenSet.json'\nimport exchangeIssuanceV2ABI from '../services/ABI/exchangeIssuanceV2.json'\n\nexport function useContract(\n  address?: string,\n  ABI?: ContractInterface,\n  withSigner = false,\n): Contract | undefined {\n  const { library, account } = useWeb3React()\n  return useMemo(\n    () =>\n      !!address && !!ABI && !!library\n        ? new Contract(\n            address,\n            ABI,\n            withSigner\n              ? library.getSigner(account).connectUnchecked()\n              : library,\n          )\n        : undefined,\n    [address, ABI, withSigner, library, account],\n  )\n}\n\nexport function getContract(\n  library: any,\n  ABI: any,\n  address?: string,\n): Contract | undefined {\n  const contract =\n    !!address && !!ABI && !!library\n      ? new Contract(address, ABI, library)\n      : undefined\n  return contract\n}\n\nexport const getTokenBalance = async (\n  library: any,\n  chainId: number,\n  contractAddress: string,\n  account: string,\n): Promise<string> => {\n  const contract = getContract(library, erc20ABI, contractAddress)\n  const balance = await contract?.balanceOf(account)\n  return balance\n}\n\nexport const getTokenDecimals = async (\n  library: any,\n  chainId: number,\n  contractAddress: string,\n): Promise<string> => {\n  const contract = getContract(library, erc20ABI, contractAddress)\n  const decimals = await contract?.decimals()\n  return decimals\n}\n\nexport const getTokenPrice = async (\n  library: any,\n  chainId: number,\n  contractAddress: string,\n): Promise<string> => {\n  const contract = getContract(library, exchangeIssuanceV2ABI, exchangeIssuanceV2.contractPolygon)\n  const price = await contract?.getAmountOutOnRedeemSet(contractAddress, USDC.contractPolygon, '1000000000000000000' )\n  return price\n}\n\nexport const getEstimatedIssueSetAmount = async (\n  library: any,\n  chainId: number,\n  contractAddressTo: string,\n  contractAddressFrom: string,\n  amountFrom: string\n): Promise<string> => {\n  const contract = getContract(library, exchangeIssuanceV2ABI, exchangeIssuanceV2.contractPolygon)\n  const amountTo = await contract?.getEstimatedIssueSetAmount(contractAddressTo, contractAddressFrom, amountFrom )\n  return amountTo\n}\n\nexport const getAmountInToIssueExactSet = async (\n  library: any,\n  chainId: number,\n  contractAddressTo: string,\n  contractAddressFrom: string,\n  amountFrom: string\n): Promise<string> => {\n  const contract = getContract(library, exchangeIssuanceV2ABI, exchangeIssuanceV2.contractPolygon)\n  const amountTo = await contract?.getAmountInToIssueExactSet(contractAddressTo, contractAddressFrom, amountFrom )\n  return amountTo\n}\n\nexport const getAmountOutOnRedeemSet = async (\n  library: any,\n  chainId: number,\n  contractAddressTo: string,\n  contractAddressFrom: string,\n  amountFrom: string\n): Promise<string> => {\n  const contract = getContract(library, exchangeIssuanceV2ABI, exchangeIssuanceV2.contractPolygon)\n  const amountTo = await contract?.getAmountOutOnRedeemSet(contractAddressTo, contractAddressFrom, amountFrom )\n  return amountTo\n}\n\n\n\n\n\n\n\n//   const iCryptoDream = library.\n//   contract(\n//     CryptoDream,\n//     '0xff3ee79CB4A7Fe0F78a3634cCfDbFc3CdCD65a64'\n//   )\n\n//   const name = await iCryptoDream.methods.name().call()\n//   const symbol = await iCryptoDream.methods.symbol().call()\n//   const decimals = await iCryptoDream.methods.decimals().call()\n//   const totalSupply = await iCryptoDream.methods.totalSupply().call()\n//   const balanceInDream = await iCryptoDream.methods\n//     .balanceOf(accounts[0])\n//     .call()\n","import { useWeb3React } from '@web3-react/core'\nimport { createContext, useEffect, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { tokensInfo } from '../constants/tokens'\nimport { getTokenBalance, getTokenPrice } from '../services/tokenSet'\nimport { formatEther } from '@ethersproject/units'\n\ninterface TokenContextValues {\n  name: string | null | undefined\n  symbol: string\n  image: string\n  fee: string\n  contractPolygon: string\n  price: any\n  amount: any\n  balance: any\n}\n\ninterface TokensContextValues {\n  tokens?: TokenContextValues[]\n  balance?: any\n  setTokens?: any\n}\n\nexport const TokensContext = createContext<TokensContextValues>({})\n\nexport const TokensProvider: React.FC<any> = ({ children }) => {\n  const { account, library, chainId } = useWeb3React()\n  const [tokens, setTokens] = useState(tokensInfo)\n  const [balance, setBalance] = useState(0)\n\n  useEffect(() => {\n    async function getBalance(contract: string, index: number) {\n      const balance = await getTokenBalance(\n        library,\n        chainId || 0,\n        contract,\n        account || '',\n      )\n      const price = await getTokenPrice(\n        library,\n        chainId || 0,\n        contract,\n      )\n\n\n      if (balance)\n\n        setTokens((tokens) => (\n\n          tokens.map((token, i) => {\n\n\n            return {\n              ...token,\n              amount: i === index ? formatEther(BigNumber.from(balance).toString()) : token.amount,\n              price: i === index ? Number(formatEther(BigNumber.from(price).toString())) : token.price,\n              balance: i === index ? Number(formatEther(BigNumber.from(balance).toString())) * Number(formatEther(BigNumber.from(price).toString())) : token.balance\n            }\n          })))\n    }\n\n    tokens?.map((token, i) => {\n      getBalance(token.contractPolygon, i)\n    })\n\n  }, [account, library, chainId])\n\n  useEffect(() => {\n    let balance = 0\n    tokens?.map((token, i) => {\n      balance = balance + (token.price * Number(token.amount))\n    })\n    setBalance(balance)\n  }, [tokens])\n\n  return (\n    <TokensContext.Provider\n      value={{\n        tokens: tokens,\n        balance: balance,\n        setTokens: setTokens,\n      }}\n    >\n      {children}\n    </TokensContext.Provider>\n  )\n}\n","\nconst baseURL = 'https://api.coingecko.com/api/v3'\n\n\nexport const coingeckoGetTokenPrice = async (\n  address: string,\n  baseCurrency = 'usd'\n): Promise<number> => {\n  // if (address === '0') {\n  //   const getPriceUrl =\n  //     baseURL + `/simple/price/?ids=ethereum&vs_currencies=${baseCurrency}`\n\n  //   const resp = await fetch(getPriceUrl)\n\n  //   const data = await resp.json().catch((err) => {\n  //     return 0\n  //   })\n\n  //   if (data === 0 || !data['ethereum']) return 0\n\n  //   return data['ethereum'][baseCurrency]\n  // }\n\n  const getPriceUrl =\n    baseURL +\n    `/simple/token_price/ethereum/?contract_addresses=${address}&vs_currencies=${baseCurrency}`\n\n  const resp = await fetch(getPriceUrl)\n\n  const data = await resp.json().catch((err) => {\n    return 0\n  })\n\n  if (data === 0 || !data[address.toLowerCase()]) return 0\n\n  return data[address.toLowerCase()][baseCurrency]\n}\n\n\n\n\nexport const fetchHistoricalTokenMarketData = (\n  id: string,\n  baseCurrency = 'usd'\n) => {\n  const coingeckoMaxTokenDataUrl =\n    baseURL +\n    `/coins/${id}/market_chart?vs_currency=${baseCurrency}&days=max&interval=daily`\n  const coingeckoHourlyTokenDataUrl =\n    baseURL + `/coins/${id}/market_chart?vs_currency=${baseCurrency}&days=90`\n\n  return Promise.all([\n    fetch(coingeckoMaxTokenDataUrl),\n    fetch(coingeckoHourlyTokenDataUrl),\n  ])\n    .then((responses) =>\n      Promise.all(responses.map((response) => response.json()))\n    )\n    .then((data) => {\n      const prices = data[0].prices,\n        hourlyPrices = data[1].prices,\n        marketcaps = data[0].market_caps,\n        volumes = data[0].total_volumes\n\n      return { prices, hourlyPrices, marketcaps, volumes }\n    })\n    .catch((error) => console.log(error))\n}\n\nexport const fetchCoingeckoTokenPrice = async (\n  address: string,\n  baseCurrency = 'usd'\n): Promise<number> => {\n  // if (address === ethTokenAddress) {\n  //   const getPriceUrl =\n  //     baseURL + `/simple/price/?ids=ethereum&vs_currencies=${baseCurrency}`\n\n  //   const resp = await fetch(getPriceUrl)\n\n  //   const data = await resp.json().catch((err) => {\n  //     return 0\n  //   })\n\n  //   if (data === 0 || !data['ethereum']) return 0\n\n  //   return data['ethereum'][baseCurrency]\n  // }\n\n  const getPriceUrl =\n    baseURL +\n    `/simple/token_price/ethereum/?contract_addresses=${address}&vs_currencies=${baseCurrency}`\n\n  const resp = await fetch(getPriceUrl)\n\n  const data = await resp.json().catch((err) => {\n    return 0\n  })\n\n  if (data === 0 || !data[address.toLowerCase()]) return 0\n\n  return data[address.toLowerCase()][baseCurrency]\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { createContext, useEffect, useState } from 'react'\nimport { tokensInfo } from '../constants/tokens'\nimport { activeTokensFrom } from '../constants/tokenSet'\nimport {\n    getAmountInToIssueExactSet,\n  getAmountOutOnRedeemSet,\n  getEstimatedIssueSetAmount,\n  getTokenBalance,\n  getTokenDecimals,\n  getTokenPrice,\n} from '../services/tokenSet'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, formatUnits, parseEther, parseUnits } from '@ethersproject/units'\nimport { coingeckoGetTokenPrice } from '../services/coingeckoApi'\nimport { isConstructorDeclaration } from 'typescript'\n\ninterface SwapContextValues {\n  activeTokenFrom: any\n  setActiveTokenFrom: any\n  activeTokenTo: any\n  setActiveTokenTo: any\n  amountFrom: any\n  setAmountFrom: any\n  amountTo: any\n  setAmountTo: any\n}\n\nexport const SwapContext = createContext<SwapContextValues>({\n  activeTokenFrom: null,\n  setActiveTokenFrom: null,\n  activeTokenTo: null,\n  setActiveTokenTo: null,\n  amountFrom: null,\n  setAmountFrom: null,\n  amountTo: null,\n  setAmountTo: null,\n})\n\nexport const SwapProvider: React.FC<any> = ({ children }) => {\n  const { account, library, chainId } = useWeb3React()\n  const [activeTokenFrom, setActiveTokenFrom] = useState(activeTokensFrom[0])\n  const [activeTokenTo, setActiveTokenTo] = useState(tokensInfo[0])\n  const [amountFrom, setAmountFrom] = useState('0')\n  const [amountTo, setAmountTo] = useState('0')\n\n  useEffect(() => {\n    async function getBalance(token: any) {\n      const balance = await getTokenBalance(\n        library,\n        chainId || 0,\n        token.contractPolygon,\n        account || '',\n      )\n\n      const price = await coingeckoGetTokenPrice(token.contract)\n      \n\n      if (balance)\n        setActiveTokenFrom({\n          ...activeTokenFrom,\n          balance: formatEther(BigNumber.from(balance).toString()),\n          price: price.toString(),\n        })\n    }\n    getBalance(activeTokenFrom)\n    setAmountFrom('0')\n  }, [activeTokenFrom.id])\n\n  useEffect(() => {\n    async function getBalance(contract: string) {\n      const balance = await getTokenBalance(\n        library,\n        chainId || 0,\n        contract,\n        account || '',\n      )\n\n      const price = await getTokenPrice(library, chainId || 0, contract)\n\n      if (balance)\n        setActiveTokenTo({\n          ...activeTokenTo,\n          balance: Number(formatEther(BigNumber.from(balance).toString())),\n          price: Number(formatEther(BigNumber.from(price).toString())),\n        })\n    }\n    getBalance(activeTokenTo.contractPolygon)\n  }, [activeTokenTo.id])\n\n  useEffect(() => {\n    async function updateSwapInfo() {\n      const amountTo = await getEstimatedIssueSetAmount(\n        library,\n        chainId || 0,\n        activeTokenTo.contractPolygon,\n        activeTokenFrom.contractPolygon,\n        parseUnits(amountFrom, activeTokenFrom.decimals).toString(),\n      )\n     setAmountTo(Number(formatUnits(amountTo,'18')).toFixed(4))\n    }\n\n    updateSwapInfo()\n  }, [amountFrom])\n\n  return (\n    <SwapContext.Provider\n      value={{\n        activeTokenFrom: activeTokenFrom,\n        setActiveTokenFrom: setActiveTokenFrom,\n        activeTokenTo: activeTokenTo,\n        setActiveTokenTo: setActiveTokenTo,\n        amountFrom: amountFrom,\n        setAmountFrom: setAmountFrom,\n        amountTo: amountTo,\n        setAmountTo: setAmountTo,\n      }}\n    >\n      {children}\n    </SwapContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { Web3ReactProvider } from '@web3-react/core'\n\nimport { getLibrary } from './services/web3Utils'\nimport { TokensProvider } from './contexts/TokensContext'\nimport { SwapProvider } from './contexts/SwapContext'\n\nconst Providers: React.FC = ({ children }) => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <TokensProvider>\n      <SwapProvider>\n        {children}\n      </SwapProvider>\n    </TokensProvider>\n  </Web3ReactProvider>\n)\nexport default Providers\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\n// import { NetworkConnector } from '@web3-react/network-connector'\n\n// const NETWORK_URL = 'https://mainnet.eth.aragon.network/'\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.RPC_URL_1 as string,\n  4: process.env.RPC_URL_4 as string\n}\n\n// export const network = new NetworkConnector({\n//   urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\n//   defaultChainId: 1\n// })\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 137]\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  qrcode: true\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Common Sense Finance',\n  supportedChainIds: [1, 137]\n})\n","import React, { useState, useEffect } from 'react'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\n\nimport {\n  injected,\n  // network,\n  walletconnect,\n  walletlink,\n} from '../services/connectors'\n\nimport {\n  Modal,\n  Button,\n  Dropdown,\n  Image,\n  Card,\n} from 'react-bootstrap'\n\nimport { formatAccount, getNetworkName, Balance } from '../services/web3Utils'\nimport { useEagerConnect, useInactiveListener } from '../hooks/web3Hooks'\n\n// enum ConnectorNames {\n//   Injected = 'Injected',\n//   // Network = 'Network',\n//   WalletConnect = 'WalletConnect',\n//   WalletLink = 'WalletLink',\n// }\n\n// const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n//   [ConnectorNames.Injected]: injected,\n//   // [ConnectorNames.Network]: network,\n//   [ConnectorNames.WalletConnect]: walletconnect,\n//   [ConnectorNames.WalletLink]: walletlink,\n// }\n\nconst WalletButton = () => {\n  const [showModal, setShowModal] = useState(false)\n\n  const handleClose = () => setShowModal(false)\n  const handleShow = () => setShowModal(true)\n\n  const context = useWeb3React<Web3Provider>()\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n  } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState<any>()\n\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  const walletButtonText = !!account ? formatAccount(account) : 'Connect Wallet'\n\n  return (\n    <>\n      {!!(library && account) ? (\n        <Dropdown align=\"end\">\n          <Dropdown.Toggle\n            className=\"border rounded-pill\"\n            variant=\"light\"\n            id=\"dropdown-basic\"\n          >\n            <Image\n              className=\"me-2\"\n              style={{ width: '20px' }}\n              src=\"placeholder.png\"\n              max-width=\"50px\"\n              roundedCircle\n            />\n            {walletButtonText}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"border-0\">\n            <Card style={{ width: '18rem' }}>\n              <Card.Header>\n                <span className=\"float-start\">\n                  <strong>Account</strong>\n                </span>\n\n                <Button\n                  className=\"btn-sm float-end\"\n                  variant=\"secondary\"\n                  onClick={() => {\n                    deactivate()\n                  }}\n                >\n                  Disconnect\n                </Button>\n              </Card.Header>\n              <Card.Body>\n                <Card.Title></Card.Title>\n                <Card.Text>\n                  <Image\n                    className=\"me-2\"\n                    style={{ width: '40px' }}\n                    src=\"placeholder.png\"\n                    max-width=\"50px\"\n                    roundedCircle\n                  />\n                  {walletButtonText}\n                  <div className=\"pt-3\">Balance</div>\n                  <div >\n                    <strong>\n                    <Balance />\n                    </strong>\n                    \n                  </div>\n                </Card.Text>\n              </Card.Body>\n              <Card.Footer>\n                <span className=\"me-2 align-middle badge border border-light rounded-circle bg-success p-2\">\n                  <span className=\"visually-hidden\">unread messages</span>\n                </span>\n                <span className=\" align-middle\">\n                  {getNetworkName(chainId || 0)}\n                </span>\n              </Card.Footer>\n            </Card>\n          </Dropdown.Menu>\n        </Dropdown>\n      ) : (\n        <Button variant=\"primary\" onClick={handleShow}>\n          {walletButtonText}\n        </Button>\n      )}\n\n      <Modal show={showModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Select a wallet provider</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"text-center\">\n          <Button\n            className=\"me-2\"\n            variant=\"light\"\n            onClick={() => {\n              activate(injected)\n              setShowModal(false)\n            }}\n          >\n            <Image\n                    className=\"me-2\"\n                    style={{ width: '25px' }}\n                    src=\"metamask-fox.svg\"\n                    max-width=\"50px\"\n            \n                  />\n            Metamask\n          </Button>\n          <Button\n          className=\"me-2\"\n            variant=\"light\"\n            onClick={() => {\n              activate(walletconnect)\n              setShowModal(false)\n            }}\n          >\n            <Image\n                    className=\"me-2\"\n                    style={{ width: '25px' }}\n                    src=\"wallet-connect.svg\"\n                    max-width=\"50px\"\n            \n                  />\n            WalletConnect\n          </Button>\n          <Button\n          className=\"me-2\"\n            variant=\"light\"\n            onClick={() => {\n              activate(walletlink)\n              setShowModal(false)\n            }}\n          >\n            <Image\n                    className=\"me-2\"\n                    style={{ width: '25px' }}\n                    src=\"coinbase-wallet.svg\"\n                    max-width=\"50px\"\n            \n                  />\n            WalletLink\n          </Button>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default WalletButton\n\n// <div>\n//         {Object.keys(connectorsByName).map((name) => {\n//           const currentConnector = null //connectorsByName[name]\n//           const activating = currentConnector === activatingConnector\n//           const connected = currentConnector === connector\n//           const disabled =\n//             !triedEager || !!activatingConnector || connected || !!error\n\n//           return (\n//             <button\n//               style={{\n//                 height: '3rem',\n//                 borderRadius: '1rem',\n//                 borderColor: activating\n//                   ? 'orange'\n//                   : connected\n//                   ? 'green'\n//                   : 'unset',\n//                 cursor: disabled ? 'unset' : 'pointer',\n//                 position: 'relative',\n//               }}\n//               disabled={disabled}\n//               key={name}\n//               onClick={() => {\n//                 setActivatingConnector(currentConnector)\n//                 activate(injected)\n//               }}\n//             >\n//               <div\n//                 style={{\n//                   position: 'absolute',\n//                   top: '0',\n//                   left: '0',\n//                   height: '100%',\n//                   display: 'flex',\n//                   alignItems: 'center',\n//                   color: 'black',\n//                   margin: '0 0 0 1rem',\n//                 }}\n//               >\n//                 {activating && (\n//                   <Spinner\n//                     color={'black'}\n//                     style={{ height: '25%', marginLeft: '-1rem' }}\n//                   />\n//                 )}\n//                 {connected && (\n//                   <span role=\"img\" aria-label=\"check\">\n//                     ✅\n//                   </span>\n//                 )}\n//               </div>\n//               {name}\n//             </button>\n//           )\n//         })}\n//       </div>\n\n//       <div\n//         style={{\n//           display: 'flex',\n//           flexDirection: 'column',\n//           alignItems: 'center',\n//         }}\n//       >\n//         {(active || error) && (\n//           <button\n//             style={{\n//               height: '3rem',\n//               marginTop: '2rem',\n//               borderRadius: '1rem',\n//               borderColor: 'red',\n//               cursor: 'pointer',\n//             }}\n//             onClick={() => {\n//               deactivate()\n//             }}\n//           >\n//             Deactivate\n//           </button>\n//         )}\n\n//         {!!error && (\n//           <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>\n//             {getErrorMessage(error)}\n//           </h4>\n//         )}\n//       </div>\n\n//           {/* //Sign Message BUTON */}\n\n//       <hr style={{ margin: '2rem' }} />\n\n//       <div\n//         style={{\n//           display: 'grid',\n//           gridGap: '1rem',\n//           gridTemplateColumns: 'fit-content',\n//           maxWidth: '20rem',\n//           margin: 'auto',\n//         }}\n//       >\n//         {!!(library && account) && (\n//           <button\n//             style={{\n//               height: '3rem',\n//               borderRadius: '1rem',\n//               cursor: 'pointer',\n//             }}\n//             onClick={() => {\n//               library\n//                 .getSigner(account)\n//                 .signMessage('👋')\n//                 .then((signature: any) => {\n//                   window.alert(`Success!\\n\\n${signature}`)\n//                 })\n//                 .catch((error: any) => {\n//                   window.alert(\n//                     'Failure!' +\n//                       (error && error.message ? `\\n\\n${error.message}` : ''),\n//                   )\n//                 })\n//             }}\n//           >\n//             Sign Message\n//           </button>\n//         )}\n\n//       </div>\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from '../services/connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n","import { Navbar, Container, Nav, Button } from 'react-bootstrap'\n\nimport WalletButton from './WalletButton'\nimport { GetSelectedNetworkStatus } from '../services/web3Utils' \n\nexport const NavBar = () => {\n\n  const networkStatus = GetSelectedNetworkStatus()\n\n  return (\n    <Container fluid className=\"py-2\">\n      <Navbar collapseOnSelect expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand href=\"/\">\n            {' '}\n            <img src=\"csLogo.svg\" alt=\"\" width=\"200\"></img>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"me-auto\">\n\n              <Button variant=\"light\">\n                \n                \n                {networkStatus}\n              \n              \n              </Button>\n              \n              {/* <NavDropdown\n                title={networkStatus}\n                id=\"collasible-nav-dropdown\"\n                className=\"me-2\"\n              >\n                <NavDropdown.Item className=\"disabled\">\n                  Select Network\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#\">\n                  <img\n                    src={cryptoIcons.eth}\n                    alt=\"\"\n                    width=\"23\"\n                    className=\"me-2 rounded\"\n                  ></img>\n                  Ethereum\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#\">\n                  <img\n                    src={cryptoIcons.matic}\n                    alt=\"\"\n                    width=\"23\"\n                    className=\"me-2 rounded\"\n                  ></img>\n                  Polygon\n                </NavDropdown.Item>\n              </NavDropdown> */}\n\n            </Nav>\n            <Nav>\n              <WalletButton />\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </Container>\n  )\n}\n","import { useContext } from 'react'\n\nimport { TokensContext } from '../contexts/TokensContext'\n\nconst useTokens = () => {\n  return { ...useContext(TokensContext) }\n}\n\nexport default useTokens\n","import useTokens from '../../hooks/useTokens'\n\nexport const UserBalance = () => {\n  const { balance } = useTokens()\n\n  return (\n    <div className=\"bg-light text-center py-4\">\n      <p>My Total Balance</p>\n      <h2>${balance.toFixed(2)}</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Container, Card, Table, Button } from 'react-bootstrap'\nimport useTokens from '../../hooks/useTokens'\n\nexport const UserTokens = () => {\n  const { tokens, setTokens } = useTokens()\n\n  const handleWithdraw = (index: any) => {\n    setTokens (\n      tokens?.map((token, i) => {\n        return (\n          (i === index) ? \n            {...token, \n              amount: token.amount - 1,\n              balance: token.price * (token.amount - 1)} : \n            {...token}\n        )\n          \n      }))\n  }\n\n  return (\n    <Container className=\"pt-5\">\n      <h4 className=\"pb-2\">My Invesments</h4>\n      <Card className=\"rounded\">\n        <Card.Body>\n          <Table className=\"table-borderless\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Symbol</th>\n                <th>Name</th>\n                <th className='text-end'>Price</th>\n                <th className='text-end'>Amount</th>\n                <th className='text-end'>Balance</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n\n            <tbody className=\"border-top\">\n              {tokens?.map(\n                (token, index) =>\n                  token.amount !== '0.0' && (\n                    <tr key={index}>\n                      <td>\n                        <img\n                          src={token.image}\n                          alt=\"\"\n                          width=\"23\"\n                          className=\"me-2 rounded\"\n                        ></img>\n                      </td>\n                      <td>{token.symbol}</td>\n                      <td>{token.name}</td>\n                      <td className='text-end'>${token.price.toFixed(2)}</td>\n                      <td className='text-end'>{Number(token.amount).toFixed(4)}</td>\n                      <td className='text-end'>${token.balance.toFixed(2)}</td>\n                      <td>\n                        <Button\n                          className=\"me-2 btn-sm\"\n                          onClick={() => handleWithdraw(index)}\n                        >\n\n                            Withdraw\n                        </Button>\n                      </td>\n                    </tr>\n                  ),\n              )}\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { UserBalance } from './UserBalance'\nimport { UserTokens } from './UserTokens'\n\nexport const UserProfile = () => {\n    return (\n        <div>\n            <UserBalance />\n            <UserTokens />\n        </div>\n    )\n}\n","\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from 'react-bootstrap'\nimport { UserProfile } from './UserProfile/UserProfile'\nimport { ArrowUpRight } from 'react-bootstrap-icons';\n\n\nexport const Hero = () => {\n  const { active } = useWeb3React()\n\n  return (\n    <>\n      {active ? (\n        <UserProfile />\n      ) : (\n        <div className=\"bg-light text-center py-5\">\n          <h1>Investing in crypto, simplified</h1>\n          <div className=\"pb-5\">\n            We're helping people like you to have the same returns as geeks\n            through 'All in One' tokens.\n          </div>\n          <Button >Learn more <ArrowUpRight /></Button>\n        </div>\n      )}\n    </>\n  )\n}\n","\nimport { Container, Table, Button, Card } from 'react-bootstrap'\nimport useTokens from '../hooks/useTokens'\n\nexport const Tokens = () => {\n  const {tokens, setTokens} = useTokens()\n  \n  const handleInvest = (index: any) => {\n    setTokens (\n      tokens?.map((token, i) => {\n        return (\n          (i === index) ? \n            {...token, \n              amount: token.amount + 1,\n              balance: token.price * (token.amount + 1)} : \n            {...token}\n        )\n          \n      }))\n    }\n\n  return (\n    <div>\n      <Container className=\"py-5\">\n        <h4 className='pb-2'>Invesments Tokens</h4>\n        <Card className=\"rounded\">\n          <Card.Body>\n            <Table className=\"table-borderless\">\n              <thead className=\"border-button\">\n                <tr>\n                  <th>#</th>\n                  <th>Symbol</th>\n                  <th>Name</th>\n                  <th>Fees</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n\n              <tbody className=\"border-top\">\n              \n                 {tokens?.map((token, index) => (\n                  <tr key={index}>\n                    <td>\n                      <img\n                        src={token.image}\n                        alt=\"\"\n                        width=\"23\"\n                        className=\"me-2 rounded\"\n                      ></img>\n                    </td>\n                    <td>{token.symbol}</td>\n                    <td>{token.name}</td>\n                    <td>{token.fee}</td>\n                    <td>\n                      <Button \n                        className=\"me-2 btn-sm\"\n                        onClick={()=>handleInvest(index)}\n                      >\n                        Invest\n                      </Button>\n                      <Button className=\"me-2 btn-sm\">View</Button>\n                    </td>\n                  </tr>\n                ))} \n              </tbody>\n            </Table>\n          </Card.Body>\n        </Card>\n      </Container>\n    </div>\n  )\n}\n","import { Container } from 'react-bootstrap'\n\nimport { Telegram, Github, Twitter } from 'react-bootstrap-icons'\n\nexport const Footer = () => {\n  return (\n    <Container fluid className=\"px-4 fixed-bottom\">\n      <footer className=\"d-flex flex-wrap justify-content-between align-items-center py-1 my-4 border-top\">\n          \n        <div className=\"col-md-4 d-flex align-items-center pt-2\">\n          <span className=\"text-muted\">&copy; 2021 Common Sense, Inc</span>\n        </div>\n\n        <ul className=\"nav col-md-4 justify-content-end list-unstyled d-flex pt-2\">\n          <li className=\"ms-3\">\n            <a className=\"text-muted\" href=\"/\">\n              <Telegram />\n            </a>\n          </li>\n          <li className=\"ms-3\">\n            <a className=\"text-muted\" href=\"/\">\n              <Github />\n            </a>\n          </li>\n          <li className=\"ms-3\">\n            <a className=\"text-muted\" href=\"/\">\n              <Twitter />\n            </a>\n          </li>\n        </ul>\n        \n      </footer>\n      \n    </Container>\n  )\n}\n","import { useContext } from 'react'\n\nimport { SwapContext } from '../contexts/SwapContext'\n\nconst useSwap = () => {\n  return { ...useContext(SwapContext) }\n}\n\nexport default useSwap\n","import { Form } from 'react-bootstrap'\nimport { tokensInfo } from '../../../constants/tokens'\nimport { activeTokensFrom } from '../../../constants/tokenSet'\nimport useSwap from '../../../hooks/useSwap'\n\nexport const SelectTokensFrom = () => {\n  const { activeTokenFrom, setActiveTokenFrom } = useSwap()\n  return (\n    <Form.Select\n      key={activeTokenFrom.id}\n      value={activeTokenFrom.id}\n      onChange={(e) => setActiveTokenFrom(activeTokensFrom[parseInt(e.currentTarget.value)])}\n    >\n      {activeTokensFrom.map((token) => {\n        return <option value={token.id}>{token.symbol}</option>\n      })}\n    </Form.Select>\n  )\n}\n\nexport const SelectTokensTo = () => {\n  const { activeTokenTo, setActiveTokenTo } = useSwap()\n\n  return (\n    <Form.Select\n      key={activeTokenTo.id}\n      value={activeTokenTo.id}\n      onChange={(e) => setActiveTokenTo(tokensInfo[parseInt(e.currentTarget.value)])}\n    >\n      {tokensInfo.map((token) => {\n        return <option value={token.id}>{token.symbol}</option>\n      })}\n    </Form.Select>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Col,\n  Form,\n  Nav,\n  Row,\n} from 'react-bootstrap'\nimport useSwap from '../../hooks/useSwap'\n\nimport { SelectTokensFrom, SelectTokensTo } from './components/SwapControls'\n\nexport const Swap = () => {\n  const [swapActionState, setSwapActionState] = useState('Invest')\n  const { activeTokenFrom, activeTokenTo, amountFrom, setAmountFrom, amountTo } = useSwap()\n\n  return (\n    <div>\n      <Nav\n        className=\"mb-2 border-bottom-0\"\n        variant=\"tabs\"\n        activeKey={swapActionState}\n        onSelect={(selectedKey) => setSwapActionState(selectedKey || '')}\n      >\n        <Nav.Item>\n          <Nav.Link eventKey=\"Invest\">Invest</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"Withdraw\">Withdraw</Nav.Link>\n        </Nav.Item>\n      </Nav>\n\n      <Form>\n        <Row className=\"g-2 p-3 border rounded\">\n          <Col className=\"col-3\">\n            <Form.Group className=\"mb-3\">\n              <Form.Label className=\"text-end pt-1\">From</Form.Label>\n              <SelectTokensFrom />\n              <Form.Label className=\"pt-2\">{activeTokenFrom.name}</Form.Label>\n            </Form.Group>\n          </Col>\n          <Col className=\"col-9\">\n            <Form.Group className=\"mb-3 text-end\">\n              <Form.Label\n                className=\"pt-1\"\n              >\n                Balance: {Number(activeTokenFrom.balance).toFixed(4)} \n          \n              </Form.Label>\n              <Button\n                  className=\"align-top\"\n                  size=\"sm\"\n                  variant=\"link\"\n                  onClick={e => setAmountFrom(Number(activeTokenFrom.balance).toFixed(4))}\n                  >Max</Button>\n              <Form.Control \n                className=\"text-end\" \n                type=\"number\" \n                placeholder=\"\"\n                value={amountFrom}\n                onChange={(e) => setAmountFrom(e.currentTarget.value)}\n              />\n                 \n              <Form.Label className=\"pt-2\">~${(Number(activeTokenFrom.price) * Number(activeTokenFrom.balance)).toFixed(2)}</Form.Label>\n            </Form.Group>\n          </Col>\n          <Col className=\"col-3\">\n            <Form.Group className=\"mb-3\">\n              <Form.Label className=\"text-end\">To</Form.Label>\n              <SelectTokensTo />\n              <Form.Label className=\"pt-2\">{activeTokenTo.name}</Form.Label>\n            </Form.Group>\n          </Col>\n          <Col className=\"col-9\">\n            <Form.Group className=\"mb-3 text-end\">\n              <Form.Label>Balance: {Number(activeTokenTo.balance).toFixed(4)}</Form.Label>\n              <Form.Control \n                className=\"text-end\" \n                type=\"number\" \n                placeholder=\"\"\n                value={amountTo}/>\n              <Form.Label className=\"pt-2\">~${(Number(activeTokenTo.price) * Number(activeTokenTo.balance)).toFixed(2)}</Form.Label>\n            </Form.Group>\n          </Col>\n          <Col>\n            <Form.Group className=\"mb-3 text-end\">\n              <Form.Control\n                className=\"btn btn-primary\"\n                type=\"button\"\n                value={swapActionState}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  )\n}\n","import React from 'react'\nimport Providers from './Providers'\n\nimport { NavBar } from './components/NavBar'\nimport { Hero } from './components/Hero'\nimport { Tokens } from './components/Tokens'\nimport { Footer } from './components/Footer'\nimport { Swap } from './components/Swap/Swap'\nimport { Container } from 'react-bootstrap'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Providers>\n        <NavBar />\n        <Container className=\"py-5\">\n          <Swap />\n        </Container>\n        <Hero />\n        <Tokens />\n        <Footer />\n      </Providers>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}